# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetTeamResult',
    'AwaitableGetTeamResult',
    'get_team',
    'get_team_output',
]

@pulumi.output_type
class GetTeamResult:
    """
    A collection of values returned by getTeam.
    """
    def __init__(__self__, copy_cc=None, id=None, team_id=None, team_members=None, team_name=None):
        if copy_cc and not isinstance(copy_cc, bool):
            raise TypeError("Expected argument 'copy_cc' to be a bool")
        pulumi.set(__self__, "copy_cc", copy_cc)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if team_id and not isinstance(team_id, str):
            raise TypeError("Expected argument 'team_id' to be a str")
        pulumi.set(__self__, "team_id", team_id)
        if team_members and not isinstance(team_members, dict):
            raise TypeError("Expected argument 'team_members' to be a dict")
        pulumi.set(__self__, "team_members", team_members)
        if team_name and not isinstance(team_name, str):
            raise TypeError("Expected argument 'team_name' to be a str")
        pulumi.set(__self__, "team_name", team_name)

    @property
    @pulumi.getter(name="copyCc")
    def copy_cc(self) -> bool:
        return pulumi.get(self, "copy_cc")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> str:
        return pulumi.get(self, "team_id")

    @property
    @pulumi.getter(name="teamMembers")
    def team_members(self) -> Mapping[str, str]:
        return pulumi.get(self, "team_members")

    @property
    @pulumi.getter(name="teamName")
    def team_name(self) -> str:
        return pulumi.get(self, "team_name")


class AwaitableGetTeamResult(GetTeamResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTeamResult(
            copy_cc=self.copy_cc,
            id=self.id,
            team_id=self.team_id,
            team_members=self.team_members,
            team_name=self.team_name)


def get_team(team_id: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTeamResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['teamId'] = team_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('upstash:index/getTeam:getTeam', __args__, opts=opts, typ=GetTeamResult).value

    return AwaitableGetTeamResult(
        copy_cc=__ret__.copy_cc,
        id=__ret__.id,
        team_id=__ret__.team_id,
        team_members=__ret__.team_members,
        team_name=__ret__.team_name)


@_utilities.lift_output_func(get_team)
def get_team_output(team_id: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTeamResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...

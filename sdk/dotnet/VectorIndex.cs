// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Upstash
{
    [UpstashResourceType("upstash:index/vectorIndex:VectorIndex")]
    public partial class VectorIndex : Pulumi.CustomResource
    {
        /// <summary>
        /// The creation time of the vector index in UTC as unix timestamp.
        /// </summary>
        [Output("creationTime")]
        public Output<int> CreationTime { get; private set; } = null!;

        /// <summary>
        /// The unique ID associated to the owner of this index.
        /// </summary>
        [Output("customerId")]
        public Output<string> CustomerId { get; private set; } = null!;

        /// <summary>
        /// Size of the vector array.
        /// </summary>
        [Output("dimensionCount")]
        public Output<int> DimensionCount { get; private set; } = null!;

        /// <summary>
        /// Associated endpoint of your index.
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// The number of maximum query operations you can perform in a day. Only query operations are included in query count.
        /// </summary>
        [Output("maxDailyQueries")]
        public Output<int> MaxDailyQueries { get; private set; } = null!;

        /// <summary>
        /// The number of maximum update operations you can perform in a day. Only upsert operations are included in update count.
        /// </summary>
        [Output("maxDailyUpdates")]
        public Output<int> MaxDailyUpdates { get; private set; } = null!;

        /// <summary>
        /// The maximum amount of monthly bandwidth for the index. Unit is bytes. `-1` if the limit is unlimited.
        /// </summary>
        [Output("maxMonthlyBandwidth")]
        public Output<int> MaxMonthlyBandwidth { get; private set; } = null!;

        /// <summary>
        /// The number of maximum query operations you can perform per second. Only query operations are included in query count.
        /// </summary>
        [Output("maxQueryPerSecond")]
        public Output<int> MaxQueryPerSecond { get; private set; } = null!;

        /// <summary>
        /// The number of maximum vectors in a read operation. Query and fetch operations are included in read operations.
        /// </summary>
        [Output("maxReadsPerRequest")]
        public Output<int> MaxReadsPerRequest { get; private set; } = null!;

        /// <summary>
        /// The amount of maximum size for the total metadata sizes in your index.
        /// </summary>
        [Output("maxTotalMetadataSize")]
        public Output<int> MaxTotalMetadataSize { get; private set; } = null!;

        /// <summary>
        /// The number of maximum that your index can contain.
        /// </summary>
        [Output("maxVectorCount")]
        public Output<int> MaxVectorCount { get; private set; } = null!;

        /// <summary>
        /// The number of maximum vectors in a write operation. Only upsert operations are included in write operations.
        /// </summary>
        [Output("maxWritesPerRequest")]
        public Output<int> MaxWritesPerRequest { get; private set; } = null!;

        /// <summary>
        /// The number of maximum write operations you can perform per second. Only upsert operations are included in write count.
        /// </summary>
        [Output("maxWritesPerSecond")]
        public Output<int> MaxWritesPerSecond { get; private set; } = null!;

        /// <summary>
        /// Name of the index.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Readonly REST token to send request to the related index. You can't perform update operation with this token.
        /// </summary>
        [Output("readOnlyToken")]
        public Output<string> ReadOnlyToken { get; private set; } = null!;

        /// <summary>
        /// The region where your index is deployed.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Monthly pricing of your index. Only available for fixed and pro plans.
        /// </summary>
        [Output("reservedPrice")]
        public Output<double> ReservedPrice { get; private set; } = null!;

        /// <summary>
        /// Associated distance metric to calculate the similarity.
        /// </summary>
        [Output("similarityFunction")]
        public Output<string> SimilarityFunction { get; private set; } = null!;

        /// <summary>
        /// REST token to send request to the related index.
        /// </summary>
        [Output("token")]
        public Output<string> Token { get; private set; } = null!;

        /// <summary>
        /// Associated plan of the index. Either `free`, `paid`, `fixed` or `pro`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a VectorIndex resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VectorIndex(string name, VectorIndexArgs args, CustomResourceOptions? options = null)
            : base("upstash:index/vectorIndex:VectorIndex", name, args ?? new VectorIndexArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VectorIndex(string name, Input<string> id, VectorIndexState? state = null, CustomResourceOptions? options = null)
            : base("upstash:index/vectorIndex:VectorIndex", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/upstash/pulumi-upstash",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VectorIndex resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VectorIndex Get(string name, Input<string> id, VectorIndexState? state = null, CustomResourceOptions? options = null)
        {
            return new VectorIndex(name, id, state, options);
        }
    }

    public sealed class VectorIndexArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Size of the vector array.
        /// </summary>
        [Input("dimensionCount", required: true)]
        public Input<int> DimensionCount { get; set; } = null!;

        /// <summary>
        /// Name of the index.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region where your index is deployed.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// Monthly pricing of your index. Only available for fixed and pro plans.
        /// </summary>
        [Input("reservedPrice")]
        public Input<double>? ReservedPrice { get; set; }

        /// <summary>
        /// Associated distance metric to calculate the similarity.
        /// </summary>
        [Input("similarityFunction", required: true)]
        public Input<string> SimilarityFunction { get; set; } = null!;

        /// <summary>
        /// Associated plan of the index. Either `free`, `paid`, `fixed` or `pro`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public VectorIndexArgs()
        {
        }
    }

    public sealed class VectorIndexState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The creation time of the vector index in UTC as unix timestamp.
        /// </summary>
        [Input("creationTime")]
        public Input<int>? CreationTime { get; set; }

        /// <summary>
        /// The unique ID associated to the owner of this index.
        /// </summary>
        [Input("customerId")]
        public Input<string>? CustomerId { get; set; }

        /// <summary>
        /// Size of the vector array.
        /// </summary>
        [Input("dimensionCount")]
        public Input<int>? DimensionCount { get; set; }

        /// <summary>
        /// Associated endpoint of your index.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// The number of maximum query operations you can perform in a day. Only query operations are included in query count.
        /// </summary>
        [Input("maxDailyQueries")]
        public Input<int>? MaxDailyQueries { get; set; }

        /// <summary>
        /// The number of maximum update operations you can perform in a day. Only upsert operations are included in update count.
        /// </summary>
        [Input("maxDailyUpdates")]
        public Input<int>? MaxDailyUpdates { get; set; }

        /// <summary>
        /// The maximum amount of monthly bandwidth for the index. Unit is bytes. `-1` if the limit is unlimited.
        /// </summary>
        [Input("maxMonthlyBandwidth")]
        public Input<int>? MaxMonthlyBandwidth { get; set; }

        /// <summary>
        /// The number of maximum query operations you can perform per second. Only query operations are included in query count.
        /// </summary>
        [Input("maxQueryPerSecond")]
        public Input<int>? MaxQueryPerSecond { get; set; }

        /// <summary>
        /// The number of maximum vectors in a read operation. Query and fetch operations are included in read operations.
        /// </summary>
        [Input("maxReadsPerRequest")]
        public Input<int>? MaxReadsPerRequest { get; set; }

        /// <summary>
        /// The amount of maximum size for the total metadata sizes in your index.
        /// </summary>
        [Input("maxTotalMetadataSize")]
        public Input<int>? MaxTotalMetadataSize { get; set; }

        /// <summary>
        /// The number of maximum that your index can contain.
        /// </summary>
        [Input("maxVectorCount")]
        public Input<int>? MaxVectorCount { get; set; }

        /// <summary>
        /// The number of maximum vectors in a write operation. Only upsert operations are included in write operations.
        /// </summary>
        [Input("maxWritesPerRequest")]
        public Input<int>? MaxWritesPerRequest { get; set; }

        /// <summary>
        /// The number of maximum write operations you can perform per second. Only upsert operations are included in write count.
        /// </summary>
        [Input("maxWritesPerSecond")]
        public Input<int>? MaxWritesPerSecond { get; set; }

        /// <summary>
        /// Name of the index.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Readonly REST token to send request to the related index. You can't perform update operation with this token.
        /// </summary>
        [Input("readOnlyToken")]
        public Input<string>? ReadOnlyToken { get; set; }

        /// <summary>
        /// The region where your index is deployed.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Monthly pricing of your index. Only available for fixed and pro plans.
        /// </summary>
        [Input("reservedPrice")]
        public Input<double>? ReservedPrice { get; set; }

        /// <summary>
        /// Associated distance metric to calculate the similarity.
        /// </summary>
        [Input("similarityFunction")]
        public Input<string>? SimilarityFunction { get; set; }

        /// <summary>
        /// REST token to send request to the related index.
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        /// <summary>
        /// Associated plan of the index. Either `free`, `paid`, `fixed` or `pro`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public VectorIndexState()
        {
        }
    }
}

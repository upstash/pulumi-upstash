// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Upstash
{
    public static class GetRedisDatabase
    {
        public static Task<GetRedisDatabaseResult> InvokeAsync(GetRedisDatabaseArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRedisDatabaseResult>("upstash:index/getRedisDatabase:getRedisDatabase", args ?? new GetRedisDatabaseArgs(), options.WithDefaults());

        public static Output<GetRedisDatabaseResult> Invoke(GetRedisDatabaseInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRedisDatabaseResult>("upstash:index/getRedisDatabase:getRedisDatabase", args ?? new GetRedisDatabaseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRedisDatabaseArgs : Pulumi.InvokeArgs
    {
        [Input("databaseId", required: true)]
        public string DatabaseId { get; set; } = null!;

        public GetRedisDatabaseArgs()
        {
        }
    }

    public sealed class GetRedisDatabaseInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("databaseId", required: true)]
        public Input<string> DatabaseId { get; set; } = null!;

        public GetRedisDatabaseInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRedisDatabaseResult
    {
        public readonly bool AutoScale;
        public readonly int Budget;
        public readonly bool Consistent;
        public readonly int CreationTime;
        public readonly string DatabaseId;
        public readonly string DatabaseName;
        public readonly string DatabaseType;
        public readonly int DbDailyBandwidthLimit;
        public readonly int DbDiskThreshold;
        public readonly int DbMaxClients;
        public readonly int DbMaxCommandsPerSecond;
        public readonly int DbMaxEntrySize;
        public readonly int DbMaxRequestSize;
        public readonly int DbMemoryThreshold;
        public readonly string Endpoint;
        public readonly bool Eviction;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> IpAllowlists;
        public readonly bool Multizone;
        public readonly string Password;
        public readonly int Port;
        public readonly string PrimaryRegion;
        public readonly bool ProdPack;
        public readonly string ReadOnlyRestToken;
        public readonly ImmutableArray<string> ReadRegions;
        public readonly string Region;
        public readonly string RestToken;
        public readonly string State;
        public readonly bool Tls;
        public readonly string UserEmail;

        [OutputConstructor]
        private GetRedisDatabaseResult(
            bool autoScale,

            int budget,

            bool consistent,

            int creationTime,

            string databaseId,

            string databaseName,

            string databaseType,

            int dbDailyBandwidthLimit,

            int dbDiskThreshold,

            int dbMaxClients,

            int dbMaxCommandsPerSecond,

            int dbMaxEntrySize,

            int dbMaxRequestSize,

            int dbMemoryThreshold,

            string endpoint,

            bool eviction,

            string id,

            ImmutableArray<string> ipAllowlists,

            bool multizone,

            string password,

            int port,

            string primaryRegion,

            bool prodPack,

            string readOnlyRestToken,

            ImmutableArray<string> readRegions,

            string region,

            string restToken,

            string state,

            bool tls,

            string userEmail)
        {
            AutoScale = autoScale;
            Budget = budget;
            Consistent = consistent;
            CreationTime = creationTime;
            DatabaseId = databaseId;
            DatabaseName = databaseName;
            DatabaseType = databaseType;
            DbDailyBandwidthLimit = dbDailyBandwidthLimit;
            DbDiskThreshold = dbDiskThreshold;
            DbMaxClients = dbMaxClients;
            DbMaxCommandsPerSecond = dbMaxCommandsPerSecond;
            DbMaxEntrySize = dbMaxEntrySize;
            DbMaxRequestSize = dbMaxRequestSize;
            DbMemoryThreshold = dbMemoryThreshold;
            Endpoint = endpoint;
            Eviction = eviction;
            Id = id;
            IpAllowlists = ipAllowlists;
            Multizone = multizone;
            Password = password;
            Port = port;
            PrimaryRegion = primaryRegion;
            ProdPack = prodPack;
            ReadOnlyRestToken = readOnlyRestToken;
            ReadRegions = readRegions;
            Region = region;
            RestToken = restToken;
            State = state;
            Tls = tls;
            UserEmail = userEmail;
        }
    }
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VectorIndex extends pulumi.CustomResource {
    /**
     * Get an existing VectorIndex resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VectorIndexState, opts?: pulumi.CustomResourceOptions): VectorIndex {
        return new VectorIndex(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upstash:index/vectorIndex:VectorIndex';

    /**
     * Returns true if the given object is an instance of VectorIndex.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VectorIndex {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VectorIndex.__pulumiType;
    }

    /**
     * The creation time of the vector index in UTC as unix timestamp.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<number>;
    /**
     * The unique ID associated to the owner of this index.
     */
    public /*out*/ readonly customerId!: pulumi.Output<string>;
    /**
     * Size of the vector array.
     */
    public readonly dimensionCount!: pulumi.Output<number>;
    /**
     * Associated endpoint of your index.
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * The number of maximum query operations you can perform in a day. Only query operations are included in query count.
     */
    public /*out*/ readonly maxDailyQueries!: pulumi.Output<number>;
    /**
     * The number of maximum update operations you can perform in a day. Only upsert operations are included in update count.
     */
    public /*out*/ readonly maxDailyUpdates!: pulumi.Output<number>;
    /**
     * The maximum amount of monthly bandwidth for the index. Unit is bytes. `-1` if the limit is unlimited.
     */
    public /*out*/ readonly maxMonthlyBandwidth!: pulumi.Output<number>;
    /**
     * The number of maximum query operations you can perform per second. Only query operations are included in query count.
     */
    public /*out*/ readonly maxQueryPerSecond!: pulumi.Output<number>;
    /**
     * The number of maximum vectors in a read operation. Query and fetch operations are included in read operations.
     */
    public /*out*/ readonly maxReadsPerRequest!: pulumi.Output<number>;
    /**
     * The amount of maximum size for the total metadata sizes in your index.
     */
    public /*out*/ readonly maxTotalMetadataSize!: pulumi.Output<number>;
    /**
     * The number of maximum that your index can contain.
     */
    public /*out*/ readonly maxVectorCount!: pulumi.Output<number>;
    /**
     * The number of maximum vectors in a write operation. Only upsert operations are included in write operations.
     */
    public /*out*/ readonly maxWritesPerRequest!: pulumi.Output<number>;
    /**
     * The number of maximum write operations you can perform per second. Only upsert operations are included in write count.
     */
    public /*out*/ readonly maxWritesPerSecond!: pulumi.Output<number>;
    /**
     * Name of the index.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Readonly REST token to send request to the related index. You can't perform update operation with this token.
     */
    public /*out*/ readonly readOnlyToken!: pulumi.Output<string>;
    /**
     * The region where your index is deployed.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Monthly pricing of your index. Only available for fixed and pro plans.
     */
    public readonly reservedPrice!: pulumi.Output<number>;
    /**
     * Associated distance metric to calculate the similarity.
     */
    public readonly similarityFunction!: pulumi.Output<string>;
    /**
     * REST token to send request to the related index.
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    /**
     * Associated plan of the index. Either `free`, `paid`, `fixed` or `pro`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a VectorIndex resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VectorIndexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VectorIndexArgs | VectorIndexState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VectorIndexState | undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["customerId"] = state ? state.customerId : undefined;
            resourceInputs["dimensionCount"] = state ? state.dimensionCount : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["maxDailyQueries"] = state ? state.maxDailyQueries : undefined;
            resourceInputs["maxDailyUpdates"] = state ? state.maxDailyUpdates : undefined;
            resourceInputs["maxMonthlyBandwidth"] = state ? state.maxMonthlyBandwidth : undefined;
            resourceInputs["maxQueryPerSecond"] = state ? state.maxQueryPerSecond : undefined;
            resourceInputs["maxReadsPerRequest"] = state ? state.maxReadsPerRequest : undefined;
            resourceInputs["maxTotalMetadataSize"] = state ? state.maxTotalMetadataSize : undefined;
            resourceInputs["maxVectorCount"] = state ? state.maxVectorCount : undefined;
            resourceInputs["maxWritesPerRequest"] = state ? state.maxWritesPerRequest : undefined;
            resourceInputs["maxWritesPerSecond"] = state ? state.maxWritesPerSecond : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["readOnlyToken"] = state ? state.readOnlyToken : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["reservedPrice"] = state ? state.reservedPrice : undefined;
            resourceInputs["similarityFunction"] = state ? state.similarityFunction : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as VectorIndexArgs | undefined;
            if ((!args || args.dimensionCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dimensionCount'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.similarityFunction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'similarityFunction'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["dimensionCount"] = args ? args.dimensionCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["reservedPrice"] = args ? args.reservedPrice : undefined;
            resourceInputs["similarityFunction"] = args ? args.similarityFunction : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["customerId"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["maxDailyQueries"] = undefined /*out*/;
            resourceInputs["maxDailyUpdates"] = undefined /*out*/;
            resourceInputs["maxMonthlyBandwidth"] = undefined /*out*/;
            resourceInputs["maxQueryPerSecond"] = undefined /*out*/;
            resourceInputs["maxReadsPerRequest"] = undefined /*out*/;
            resourceInputs["maxTotalMetadataSize"] = undefined /*out*/;
            resourceInputs["maxVectorCount"] = undefined /*out*/;
            resourceInputs["maxWritesPerRequest"] = undefined /*out*/;
            resourceInputs["maxWritesPerSecond"] = undefined /*out*/;
            resourceInputs["readOnlyToken"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VectorIndex.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VectorIndex resources.
 */
export interface VectorIndexState {
    /**
     * The creation time of the vector index in UTC as unix timestamp.
     */
    creationTime?: pulumi.Input<number>;
    /**
     * The unique ID associated to the owner of this index.
     */
    customerId?: pulumi.Input<string>;
    /**
     * Size of the vector array.
     */
    dimensionCount?: pulumi.Input<number>;
    /**
     * Associated endpoint of your index.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * The number of maximum query operations you can perform in a day. Only query operations are included in query count.
     */
    maxDailyQueries?: pulumi.Input<number>;
    /**
     * The number of maximum update operations you can perform in a day. Only upsert operations are included in update count.
     */
    maxDailyUpdates?: pulumi.Input<number>;
    /**
     * The maximum amount of monthly bandwidth for the index. Unit is bytes. `-1` if the limit is unlimited.
     */
    maxMonthlyBandwidth?: pulumi.Input<number>;
    /**
     * The number of maximum query operations you can perform per second. Only query operations are included in query count.
     */
    maxQueryPerSecond?: pulumi.Input<number>;
    /**
     * The number of maximum vectors in a read operation. Query and fetch operations are included in read operations.
     */
    maxReadsPerRequest?: pulumi.Input<number>;
    /**
     * The amount of maximum size for the total metadata sizes in your index.
     */
    maxTotalMetadataSize?: pulumi.Input<number>;
    /**
     * The number of maximum that your index can contain.
     */
    maxVectorCount?: pulumi.Input<number>;
    /**
     * The number of maximum vectors in a write operation. Only upsert operations are included in write operations.
     */
    maxWritesPerRequest?: pulumi.Input<number>;
    /**
     * The number of maximum write operations you can perform per second. Only upsert operations are included in write count.
     */
    maxWritesPerSecond?: pulumi.Input<number>;
    /**
     * Name of the index.
     */
    name?: pulumi.Input<string>;
    /**
     * Readonly REST token to send request to the related index. You can't perform update operation with this token.
     */
    readOnlyToken?: pulumi.Input<string>;
    /**
     * The region where your index is deployed.
     */
    region?: pulumi.Input<string>;
    /**
     * Monthly pricing of your index. Only available for fixed and pro plans.
     */
    reservedPrice?: pulumi.Input<number>;
    /**
     * Associated distance metric to calculate the similarity.
     */
    similarityFunction?: pulumi.Input<string>;
    /**
     * REST token to send request to the related index.
     */
    token?: pulumi.Input<string>;
    /**
     * Associated plan of the index. Either `free`, `paid`, `fixed` or `pro`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VectorIndex resource.
 */
export interface VectorIndexArgs {
    /**
     * Size of the vector array.
     */
    dimensionCount: pulumi.Input<number>;
    /**
     * Name of the index.
     */
    name?: pulumi.Input<string>;
    /**
     * The region where your index is deployed.
     */
    region: pulumi.Input<string>;
    /**
     * Monthly pricing of your index. Only available for fixed and pro plans.
     */
    reservedPrice?: pulumi.Input<number>;
    /**
     * Associated distance metric to calculate the similarity.
     */
    similarityFunction: pulumi.Input<string>;
    /**
     * Associated plan of the index. Either `free`, `paid`, `fixed` or `pro`.
     */
    type: pulumi.Input<string>;
}

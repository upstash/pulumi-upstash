// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RedisDatabase extends pulumi.CustomResource {
    /**
     * Get an existing RedisDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedisDatabaseState, opts?: pulumi.CustomResourceOptions): RedisDatabase {
        return new RedisDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upstash:index/redisDatabase:RedisDatabase';

    /**
     * Returns true if the given object is an instance of RedisDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedisDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedisDatabase.__pulumiType;
    }

    /**
     * Upgrade to higher plans automatically when it hits quotas
     */
    public readonly autoScale!: pulumi.Output<boolean | undefined>;
    /**
     * Budget for the database (default $20). It is used to limit the cost of the database. If the budget is reached, the
     * database will be throttled until the next month.
     */
    public readonly budget!: pulumi.Output<number | undefined>;
    /**
     * When enabled, all writes are synchronously persisted to the disk.
     *
     * @deprecated Consistent option is deprecated.
     */
    public readonly consistent!: pulumi.Output<boolean | undefined>;
    /**
     * Creation time of the database
     */
    public /*out*/ readonly creationTime!: pulumi.Output<number>;
    /**
     * Unique Database ID for created database
     */
    public /*out*/ readonly databaseId!: pulumi.Output<string>;
    /**
     * Name of the database
     */
    public readonly databaseName!: pulumi.Output<string>;
    /**
     * Type of the database
     */
    public /*out*/ readonly databaseType!: pulumi.Output<string>;
    /**
     * Daily bandwidth limit for the database
     */
    public /*out*/ readonly dbDailyBandwidthLimit!: pulumi.Output<number>;
    /**
     * Disk threshold for the database
     */
    public /*out*/ readonly dbDiskThreshold!: pulumi.Output<number>;
    /**
     * Max clients for the database
     */
    public /*out*/ readonly dbMaxClients!: pulumi.Output<number>;
    /**
     * Max commands per second for the database
     */
    public /*out*/ readonly dbMaxCommandsPerSecond!: pulumi.Output<number>;
    /**
     * Max entry size for the database
     */
    public /*out*/ readonly dbMaxEntrySize!: pulumi.Output<number>;
    /**
     * Max request size for the database
     */
    public /*out*/ readonly dbMaxRequestSize!: pulumi.Output<number>;
    /**
     * Memory threshold for the database
     */
    public /*out*/ readonly dbMemoryThreshold!: pulumi.Output<number>;
    /**
     * Database URL for connection
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * Enable eviction, to evict keys when your database reaches the max size
     */
    public readonly eviction!: pulumi.Output<boolean | undefined>;
    /**
     * Ip CIDR allowlist for the database. If not set, all IPs are allowed to connect to the database.
     */
    public readonly ipAllowlists!: pulumi.Output<string[] | undefined>;
    /**
     * When enabled, database becomes highly available and is deployed in multiple zones. (If changed to false from true,
     * results in deletion and recreation of the resource)
     *
     * @deprecated Multizone option is deprecated. It is enabled by default for paid databases.
     */
    public readonly multizone!: pulumi.Output<boolean | undefined>;
    /**
     * Password of the database
     */
    public /*out*/ readonly password!: pulumi.Output<string>;
    /**
     * Port of the endpoint
     */
    public /*out*/ readonly port!: pulumi.Output<number>;
    /**
     * Primary region for the database (Only works if region='global'. Can be one of [us-east-1, us-west-1, us-west-2,
     * eu-central-1, eu-west-1, sa-east-1, ap-southeast-1, ap-southeast-2])
     */
    public readonly primaryRegion!: pulumi.Output<string | undefined>;
    /**
     * Whether Prod Pack is enabled for the database.
     */
    public readonly prodPack!: pulumi.Output<boolean | undefined>;
    /**
     * Rest Token for the database.
     */
    public /*out*/ readonly readOnlyRestToken!: pulumi.Output<string>;
    /**
     * Read regions for the database (Only works if region='global' and primary_region is set. Can be any combination of
     * [us-east-1, us-west-1, us-west-2, eu-central-1, eu-west-1, sa-east-1, ap-southeast-1, ap-southeast-2], excluding the one
     * given as primary.)
     */
    public readonly readRegions!: pulumi.Output<string[] | undefined>;
    /**
     * region of the database. Possible values are: "global", "eu-west-1", "us-east-1", "us-west-1", "ap-northeast-1" ,
     * "eu-central1"
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Rest Token for the database.
     */
    public /*out*/ readonly restToken!: pulumi.Output<string>;
    /**
     * State of the database
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * When enabled, data is encrypted in transit. TLS is enabled by default for newly created databases and cannot be
     * disabled.
     */
    public readonly tls!: pulumi.Output<boolean | undefined>;
    /**
     * User email for the database
     */
    public /*out*/ readonly userEmail!: pulumi.Output<string>;

    /**
     * Create a RedisDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedisDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedisDatabaseArgs | RedisDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedisDatabaseState | undefined;
            resourceInputs["autoScale"] = state ? state.autoScale : undefined;
            resourceInputs["budget"] = state ? state.budget : undefined;
            resourceInputs["consistent"] = state ? state.consistent : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["databaseId"] = state ? state.databaseId : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["databaseType"] = state ? state.databaseType : undefined;
            resourceInputs["dbDailyBandwidthLimit"] = state ? state.dbDailyBandwidthLimit : undefined;
            resourceInputs["dbDiskThreshold"] = state ? state.dbDiskThreshold : undefined;
            resourceInputs["dbMaxClients"] = state ? state.dbMaxClients : undefined;
            resourceInputs["dbMaxCommandsPerSecond"] = state ? state.dbMaxCommandsPerSecond : undefined;
            resourceInputs["dbMaxEntrySize"] = state ? state.dbMaxEntrySize : undefined;
            resourceInputs["dbMaxRequestSize"] = state ? state.dbMaxRequestSize : undefined;
            resourceInputs["dbMemoryThreshold"] = state ? state.dbMemoryThreshold : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["eviction"] = state ? state.eviction : undefined;
            resourceInputs["ipAllowlists"] = state ? state.ipAllowlists : undefined;
            resourceInputs["multizone"] = state ? state.multizone : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["primaryRegion"] = state ? state.primaryRegion : undefined;
            resourceInputs["prodPack"] = state ? state.prodPack : undefined;
            resourceInputs["readOnlyRestToken"] = state ? state.readOnlyRestToken : undefined;
            resourceInputs["readRegions"] = state ? state.readRegions : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["restToken"] = state ? state.restToken : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tls"] = state ? state.tls : undefined;
            resourceInputs["userEmail"] = state ? state.userEmail : undefined;
        } else {
            const args = argsOrState as RedisDatabaseArgs | undefined;
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["autoScale"] = args ? args.autoScale : undefined;
            resourceInputs["budget"] = args ? args.budget : undefined;
            resourceInputs["consistent"] = args ? args.consistent : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["eviction"] = args ? args.eviction : undefined;
            resourceInputs["ipAllowlists"] = args ? args.ipAllowlists : undefined;
            resourceInputs["multizone"] = args ? args.multizone : undefined;
            resourceInputs["primaryRegion"] = args ? args.primaryRegion : undefined;
            resourceInputs["prodPack"] = args ? args.prodPack : undefined;
            resourceInputs["readRegions"] = args ? args.readRegions : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tls"] = args ? args.tls : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["databaseId"] = undefined /*out*/;
            resourceInputs["databaseType"] = undefined /*out*/;
            resourceInputs["dbDailyBandwidthLimit"] = undefined /*out*/;
            resourceInputs["dbDiskThreshold"] = undefined /*out*/;
            resourceInputs["dbMaxClients"] = undefined /*out*/;
            resourceInputs["dbMaxCommandsPerSecond"] = undefined /*out*/;
            resourceInputs["dbMaxEntrySize"] = undefined /*out*/;
            resourceInputs["dbMaxRequestSize"] = undefined /*out*/;
            resourceInputs["dbMemoryThreshold"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["readOnlyRestToken"] = undefined /*out*/;
            resourceInputs["restToken"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["userEmail"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RedisDatabase.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RedisDatabase resources.
 */
export interface RedisDatabaseState {
    /**
     * Upgrade to higher plans automatically when it hits quotas
     */
    autoScale?: pulumi.Input<boolean>;
    /**
     * Budget for the database (default $20). It is used to limit the cost of the database. If the budget is reached, the
     * database will be throttled until the next month.
     */
    budget?: pulumi.Input<number>;
    /**
     * When enabled, all writes are synchronously persisted to the disk.
     *
     * @deprecated Consistent option is deprecated.
     */
    consistent?: pulumi.Input<boolean>;
    /**
     * Creation time of the database
     */
    creationTime?: pulumi.Input<number>;
    /**
     * Unique Database ID for created database
     */
    databaseId?: pulumi.Input<string>;
    /**
     * Name of the database
     */
    databaseName?: pulumi.Input<string>;
    /**
     * Type of the database
     */
    databaseType?: pulumi.Input<string>;
    /**
     * Daily bandwidth limit for the database
     */
    dbDailyBandwidthLimit?: pulumi.Input<number>;
    /**
     * Disk threshold for the database
     */
    dbDiskThreshold?: pulumi.Input<number>;
    /**
     * Max clients for the database
     */
    dbMaxClients?: pulumi.Input<number>;
    /**
     * Max commands per second for the database
     */
    dbMaxCommandsPerSecond?: pulumi.Input<number>;
    /**
     * Max entry size for the database
     */
    dbMaxEntrySize?: pulumi.Input<number>;
    /**
     * Max request size for the database
     */
    dbMaxRequestSize?: pulumi.Input<number>;
    /**
     * Memory threshold for the database
     */
    dbMemoryThreshold?: pulumi.Input<number>;
    /**
     * Database URL for connection
     */
    endpoint?: pulumi.Input<string>;
    /**
     * Enable eviction, to evict keys when your database reaches the max size
     */
    eviction?: pulumi.Input<boolean>;
    /**
     * Ip CIDR allowlist for the database. If not set, all IPs are allowed to connect to the database.
     */
    ipAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When enabled, database becomes highly available and is deployed in multiple zones. (If changed to false from true,
     * results in deletion and recreation of the resource)
     *
     * @deprecated Multizone option is deprecated. It is enabled by default for paid databases.
     */
    multizone?: pulumi.Input<boolean>;
    /**
     * Password of the database
     */
    password?: pulumi.Input<string>;
    /**
     * Port of the endpoint
     */
    port?: pulumi.Input<number>;
    /**
     * Primary region for the database (Only works if region='global'. Can be one of [us-east-1, us-west-1, us-west-2,
     * eu-central-1, eu-west-1, sa-east-1, ap-southeast-1, ap-southeast-2])
     */
    primaryRegion?: pulumi.Input<string>;
    /**
     * Whether Prod Pack is enabled for the database.
     */
    prodPack?: pulumi.Input<boolean>;
    /**
     * Rest Token for the database.
     */
    readOnlyRestToken?: pulumi.Input<string>;
    /**
     * Read regions for the database (Only works if region='global' and primary_region is set. Can be any combination of
     * [us-east-1, us-west-1, us-west-2, eu-central-1, eu-west-1, sa-east-1, ap-southeast-1, ap-southeast-2], excluding the one
     * given as primary.)
     */
    readRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * region of the database. Possible values are: "global", "eu-west-1", "us-east-1", "us-west-1", "ap-northeast-1" ,
     * "eu-central1"
     */
    region?: pulumi.Input<string>;
    /**
     * Rest Token for the database.
     */
    restToken?: pulumi.Input<string>;
    /**
     * State of the database
     */
    state?: pulumi.Input<string>;
    /**
     * When enabled, data is encrypted in transit. TLS is enabled by default for newly created databases and cannot be
     * disabled.
     */
    tls?: pulumi.Input<boolean>;
    /**
     * User email for the database
     */
    userEmail?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RedisDatabase resource.
 */
export interface RedisDatabaseArgs {
    /**
     * Upgrade to higher plans automatically when it hits quotas
     */
    autoScale?: pulumi.Input<boolean>;
    /**
     * Budget for the database (default $20). It is used to limit the cost of the database. If the budget is reached, the
     * database will be throttled until the next month.
     */
    budget?: pulumi.Input<number>;
    /**
     * When enabled, all writes are synchronously persisted to the disk.
     *
     * @deprecated Consistent option is deprecated.
     */
    consistent?: pulumi.Input<boolean>;
    /**
     * Name of the database
     */
    databaseName: pulumi.Input<string>;
    /**
     * Enable eviction, to evict keys when your database reaches the max size
     */
    eviction?: pulumi.Input<boolean>;
    /**
     * Ip CIDR allowlist for the database. If not set, all IPs are allowed to connect to the database.
     */
    ipAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When enabled, database becomes highly available and is deployed in multiple zones. (If changed to false from true,
     * results in deletion and recreation of the resource)
     *
     * @deprecated Multizone option is deprecated. It is enabled by default for paid databases.
     */
    multizone?: pulumi.Input<boolean>;
    /**
     * Primary region for the database (Only works if region='global'. Can be one of [us-east-1, us-west-1, us-west-2,
     * eu-central-1, eu-west-1, sa-east-1, ap-southeast-1, ap-southeast-2])
     */
    primaryRegion?: pulumi.Input<string>;
    /**
     * Whether Prod Pack is enabled for the database.
     */
    prodPack?: pulumi.Input<boolean>;
    /**
     * Read regions for the database (Only works if region='global' and primary_region is set. Can be any combination of
     * [us-east-1, us-west-1, us-west-2, eu-central-1, eu-west-1, sa-east-1, ap-southeast-1, ap-southeast-2], excluding the one
     * given as primary.)
     */
    readRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * region of the database. Possible values are: "global", "eu-west-1", "us-east-1", "us-west-1", "ap-northeast-1" ,
     * "eu-central1"
     */
    region: pulumi.Input<string>;
    /**
     * When enabled, data is encrypted in transit. TLS is enabled by default for newly created databases and cannot be
     * disabled.
     */
    tls?: pulumi.Input<boolean>;
}

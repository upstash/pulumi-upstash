// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upstash

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type QStashSchedule struct {
	pulumi.CustomResourceState

	// Body to send for the POST request in string format. Needs escaping (\) double quotes.
	Body pulumi.StringPtrOutput `pulumi:"body"`
	// Callback URL for Qstash Schedule.
	Callback pulumi.StringPtrOutput `pulumi:"callback"`
	// Content Based Deduplication (bool) for Qstash Scheduling.
	ContentBasedDeduplication pulumi.BoolPtrOutput `pulumi:"contentBasedDeduplication"`
	// Content type for Qstash Scheduling.
	ContentType pulumi.StringPtrOutput `pulumi:"contentType"`
	// Creation time for Qstash Schedule.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Cron string for Qstash Schedule
	Cron pulumi.StringOutput `pulumi:"cron"`
	// Deduplication ID for Qstash Scheduling.
	DeduplicationId pulumi.StringPtrOutput `pulumi:"deduplicationId"`
	// Delay for Qstash Schedule.
	Delay pulumi.StringPtrOutput `pulumi:"delay"`
	// Destination for Qstash Schedule. Either Topic ID or valid URL
	Destination pulumi.StringOutput `pulumi:"destination"`
	// Forward headers to your API
	ForwardHeaders pulumi.StringMapOutput `pulumi:"forwardHeaders"`
	// Start time for Qstash Scheduling.
	NotBefore pulumi.IntPtrOutput `pulumi:"notBefore"`
	// Retries for Qstash Schedule requests.
	Retries pulumi.IntPtrOutput `pulumi:"retries"`
	// Unique Qstash Schedule ID for requested schedule
	ScheduleId pulumi.StringOutput `pulumi:"scheduleId"`
}

// NewQStashSchedule registers a new resource with the given unique name, arguments, and options.
func NewQStashSchedule(ctx *pulumi.Context,
	name string, args *QStashScheduleArgs, opts ...pulumi.ResourceOption) (*QStashSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cron == nil {
		return nil, errors.New("invalid value for required argument 'Cron'")
	}
	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource QStashSchedule
	err := ctx.RegisterResource("upstash:index/qStashSchedule:QStashSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQStashSchedule gets an existing QStashSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQStashSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QStashScheduleState, opts ...pulumi.ResourceOption) (*QStashSchedule, error) {
	var resource QStashSchedule
	err := ctx.ReadResource("upstash:index/qStashSchedule:QStashSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QStashSchedule resources.
type qstashScheduleState struct {
	// Body to send for the POST request in string format. Needs escaping (\) double quotes.
	Body *string `pulumi:"body"`
	// Callback URL for Qstash Schedule.
	Callback *string `pulumi:"callback"`
	// Content Based Deduplication (bool) for Qstash Scheduling.
	ContentBasedDeduplication *bool `pulumi:"contentBasedDeduplication"`
	// Content type for Qstash Scheduling.
	ContentType *string `pulumi:"contentType"`
	// Creation time for Qstash Schedule.
	CreatedAt *int `pulumi:"createdAt"`
	// Cron string for Qstash Schedule
	Cron *string `pulumi:"cron"`
	// Deduplication ID for Qstash Scheduling.
	DeduplicationId *string `pulumi:"deduplicationId"`
	// Delay for Qstash Schedule.
	Delay *string `pulumi:"delay"`
	// Destination for Qstash Schedule. Either Topic ID or valid URL
	Destination *string `pulumi:"destination"`
	// Forward headers to your API
	ForwardHeaders map[string]string `pulumi:"forwardHeaders"`
	// Start time for Qstash Scheduling.
	NotBefore *int `pulumi:"notBefore"`
	// Retries for Qstash Schedule requests.
	Retries *int `pulumi:"retries"`
	// Unique Qstash Schedule ID for requested schedule
	ScheduleId *string `pulumi:"scheduleId"`
}

type QStashScheduleState struct {
	// Body to send for the POST request in string format. Needs escaping (\) double quotes.
	Body pulumi.StringPtrInput
	// Callback URL for Qstash Schedule.
	Callback pulumi.StringPtrInput
	// Content Based Deduplication (bool) for Qstash Scheduling.
	ContentBasedDeduplication pulumi.BoolPtrInput
	// Content type for Qstash Scheduling.
	ContentType pulumi.StringPtrInput
	// Creation time for Qstash Schedule.
	CreatedAt pulumi.IntPtrInput
	// Cron string for Qstash Schedule
	Cron pulumi.StringPtrInput
	// Deduplication ID for Qstash Scheduling.
	DeduplicationId pulumi.StringPtrInput
	// Delay for Qstash Schedule.
	Delay pulumi.StringPtrInput
	// Destination for Qstash Schedule. Either Topic ID or valid URL
	Destination pulumi.StringPtrInput
	// Forward headers to your API
	ForwardHeaders pulumi.StringMapInput
	// Start time for Qstash Scheduling.
	NotBefore pulumi.IntPtrInput
	// Retries for Qstash Schedule requests.
	Retries pulumi.IntPtrInput
	// Unique Qstash Schedule ID for requested schedule
	ScheduleId pulumi.StringPtrInput
}

func (QStashScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*qstashScheduleState)(nil)).Elem()
}

type qstashScheduleArgs struct {
	// Body to send for the POST request in string format. Needs escaping (\) double quotes.
	Body *string `pulumi:"body"`
	// Callback URL for Qstash Schedule.
	Callback *string `pulumi:"callback"`
	// Content Based Deduplication (bool) for Qstash Scheduling.
	ContentBasedDeduplication *bool `pulumi:"contentBasedDeduplication"`
	// Content type for Qstash Scheduling.
	ContentType *string `pulumi:"contentType"`
	// Cron string for Qstash Schedule
	Cron string `pulumi:"cron"`
	// Deduplication ID for Qstash Scheduling.
	DeduplicationId *string `pulumi:"deduplicationId"`
	// Delay for Qstash Schedule.
	Delay *string `pulumi:"delay"`
	// Destination for Qstash Schedule. Either Topic ID or valid URL
	Destination string `pulumi:"destination"`
	// Forward headers to your API
	ForwardHeaders map[string]string `pulumi:"forwardHeaders"`
	// Start time for Qstash Scheduling.
	NotBefore *int `pulumi:"notBefore"`
	// Retries for Qstash Schedule requests.
	Retries *int `pulumi:"retries"`
}

// The set of arguments for constructing a QStashSchedule resource.
type QStashScheduleArgs struct {
	// Body to send for the POST request in string format. Needs escaping (\) double quotes.
	Body pulumi.StringPtrInput
	// Callback URL for Qstash Schedule.
	Callback pulumi.StringPtrInput
	// Content Based Deduplication (bool) for Qstash Scheduling.
	ContentBasedDeduplication pulumi.BoolPtrInput
	// Content type for Qstash Scheduling.
	ContentType pulumi.StringPtrInput
	// Cron string for Qstash Schedule
	Cron pulumi.StringInput
	// Deduplication ID for Qstash Scheduling.
	DeduplicationId pulumi.StringPtrInput
	// Delay for Qstash Schedule.
	Delay pulumi.StringPtrInput
	// Destination for Qstash Schedule. Either Topic ID or valid URL
	Destination pulumi.StringInput
	// Forward headers to your API
	ForwardHeaders pulumi.StringMapInput
	// Start time for Qstash Scheduling.
	NotBefore pulumi.IntPtrInput
	// Retries for Qstash Schedule requests.
	Retries pulumi.IntPtrInput
}

func (QStashScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*qstashScheduleArgs)(nil)).Elem()
}

type QStashScheduleInput interface {
	pulumi.Input

	ToQStashScheduleOutput() QStashScheduleOutput
	ToQStashScheduleOutputWithContext(ctx context.Context) QStashScheduleOutput
}

func (*QStashSchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**QStashSchedule)(nil)).Elem()
}

func (i *QStashSchedule) ToQStashScheduleOutput() QStashScheduleOutput {
	return i.ToQStashScheduleOutputWithContext(context.Background())
}

func (i *QStashSchedule) ToQStashScheduleOutputWithContext(ctx context.Context) QStashScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QStashScheduleOutput)
}

// QStashScheduleArrayInput is an input type that accepts QStashScheduleArray and QStashScheduleArrayOutput values.
// You can construct a concrete instance of `QStashScheduleArrayInput` via:
//
//	QStashScheduleArray{ QStashScheduleArgs{...} }
type QStashScheduleArrayInput interface {
	pulumi.Input

	ToQStashScheduleArrayOutput() QStashScheduleArrayOutput
	ToQStashScheduleArrayOutputWithContext(context.Context) QStashScheduleArrayOutput
}

type QStashScheduleArray []QStashScheduleInput

func (QStashScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QStashSchedule)(nil)).Elem()
}

func (i QStashScheduleArray) ToQStashScheduleArrayOutput() QStashScheduleArrayOutput {
	return i.ToQStashScheduleArrayOutputWithContext(context.Background())
}

func (i QStashScheduleArray) ToQStashScheduleArrayOutputWithContext(ctx context.Context) QStashScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QStashScheduleArrayOutput)
}

// QStashScheduleMapInput is an input type that accepts QStashScheduleMap and QStashScheduleMapOutput values.
// You can construct a concrete instance of `QStashScheduleMapInput` via:
//
//	QStashScheduleMap{ "key": QStashScheduleArgs{...} }
type QStashScheduleMapInput interface {
	pulumi.Input

	ToQStashScheduleMapOutput() QStashScheduleMapOutput
	ToQStashScheduleMapOutputWithContext(context.Context) QStashScheduleMapOutput
}

type QStashScheduleMap map[string]QStashScheduleInput

func (QStashScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QStashSchedule)(nil)).Elem()
}

func (i QStashScheduleMap) ToQStashScheduleMapOutput() QStashScheduleMapOutput {
	return i.ToQStashScheduleMapOutputWithContext(context.Background())
}

func (i QStashScheduleMap) ToQStashScheduleMapOutputWithContext(ctx context.Context) QStashScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QStashScheduleMapOutput)
}

type QStashScheduleOutput struct{ *pulumi.OutputState }

func (QStashScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QStashSchedule)(nil)).Elem()
}

func (o QStashScheduleOutput) ToQStashScheduleOutput() QStashScheduleOutput {
	return o
}

func (o QStashScheduleOutput) ToQStashScheduleOutputWithContext(ctx context.Context) QStashScheduleOutput {
	return o
}

// Body to send for the POST request in string format. Needs escaping (\) double quotes.
func (o QStashScheduleOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QStashSchedule) pulumi.StringPtrOutput { return v.Body }).(pulumi.StringPtrOutput)
}

// Callback URL for Qstash Schedule.
func (o QStashScheduleOutput) Callback() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QStashSchedule) pulumi.StringPtrOutput { return v.Callback }).(pulumi.StringPtrOutput)
}

// Content Based Deduplication (bool) for Qstash Scheduling.
func (o QStashScheduleOutput) ContentBasedDeduplication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QStashSchedule) pulumi.BoolPtrOutput { return v.ContentBasedDeduplication }).(pulumi.BoolPtrOutput)
}

// Content type for Qstash Scheduling.
func (o QStashScheduleOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QStashSchedule) pulumi.StringPtrOutput { return v.ContentType }).(pulumi.StringPtrOutput)
}

// Creation time for Qstash Schedule.
func (o QStashScheduleOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *QStashSchedule) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Cron string for Qstash Schedule
func (o QStashScheduleOutput) Cron() pulumi.StringOutput {
	return o.ApplyT(func(v *QStashSchedule) pulumi.StringOutput { return v.Cron }).(pulumi.StringOutput)
}

// Deduplication ID for Qstash Scheduling.
func (o QStashScheduleOutput) DeduplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QStashSchedule) pulumi.StringPtrOutput { return v.DeduplicationId }).(pulumi.StringPtrOutput)
}

// Delay for Qstash Schedule.
func (o QStashScheduleOutput) Delay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QStashSchedule) pulumi.StringPtrOutput { return v.Delay }).(pulumi.StringPtrOutput)
}

// Destination for Qstash Schedule. Either Topic ID or valid URL
func (o QStashScheduleOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v *QStashSchedule) pulumi.StringOutput { return v.Destination }).(pulumi.StringOutput)
}

// Forward headers to your API
func (o QStashScheduleOutput) ForwardHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v *QStashSchedule) pulumi.StringMapOutput { return v.ForwardHeaders }).(pulumi.StringMapOutput)
}

// Start time for Qstash Scheduling.
func (o QStashScheduleOutput) NotBefore() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QStashSchedule) pulumi.IntPtrOutput { return v.NotBefore }).(pulumi.IntPtrOutput)
}

// Retries for Qstash Schedule requests.
func (o QStashScheduleOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QStashSchedule) pulumi.IntPtrOutput { return v.Retries }).(pulumi.IntPtrOutput)
}

// Unique Qstash Schedule ID for requested schedule
func (o QStashScheduleOutput) ScheduleId() pulumi.StringOutput {
	return o.ApplyT(func(v *QStashSchedule) pulumi.StringOutput { return v.ScheduleId }).(pulumi.StringOutput)
}

type QStashScheduleArrayOutput struct{ *pulumi.OutputState }

func (QStashScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QStashSchedule)(nil)).Elem()
}

func (o QStashScheduleArrayOutput) ToQStashScheduleArrayOutput() QStashScheduleArrayOutput {
	return o
}

func (o QStashScheduleArrayOutput) ToQStashScheduleArrayOutputWithContext(ctx context.Context) QStashScheduleArrayOutput {
	return o
}

func (o QStashScheduleArrayOutput) Index(i pulumi.IntInput) QStashScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QStashSchedule {
		return vs[0].([]*QStashSchedule)[vs[1].(int)]
	}).(QStashScheduleOutput)
}

type QStashScheduleMapOutput struct{ *pulumi.OutputState }

func (QStashScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QStashSchedule)(nil)).Elem()
}

func (o QStashScheduleMapOutput) ToQStashScheduleMapOutput() QStashScheduleMapOutput {
	return o
}

func (o QStashScheduleMapOutput) ToQStashScheduleMapOutputWithContext(ctx context.Context) QStashScheduleMapOutput {
	return o
}

func (o QStashScheduleMapOutput) MapIndex(k pulumi.StringInput) QStashScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QStashSchedule {
		return vs[0].(map[string]*QStashSchedule)[vs[1].(string)]
	}).(QStashScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QStashScheduleInput)(nil)).Elem(), &QStashSchedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*QStashScheduleArrayInput)(nil)).Elem(), QStashScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QStashScheduleMapInput)(nil)).Elem(), QStashScheduleMap{})
	pulumi.RegisterOutputType(QStashScheduleOutput{})
	pulumi.RegisterOutputType(QStashScheduleArrayOutput{})
	pulumi.RegisterOutputType(QStashScheduleMapOutput{})
}

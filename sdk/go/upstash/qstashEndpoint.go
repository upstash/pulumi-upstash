// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upstash

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type QStashEndpoint struct {
	pulumi.CustomResourceState

	// Unique Qstash Endpoint ID
	EndpointId pulumi.StringOutput `pulumi:"endpointId"`
	// Topic Id that the endpoint is added to
	TopicId pulumi.StringOutput `pulumi:"topicId"`
	// Unique Qstash Topic Name for Endpoint
	TopicName pulumi.StringOutput `pulumi:"topicName"`
	// URL of the endpoint
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewQStashEndpoint registers a new resource with the given unique name, arguments, and options.
func NewQStashEndpoint(ctx *pulumi.Context,
	name string, args *QStashEndpointArgs, opts ...pulumi.ResourceOption) (*QStashEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TopicId == nil {
		return nil, errors.New("invalid value for required argument 'TopicId'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource QStashEndpoint
	err := ctx.RegisterResource("upstash:index/qStashEndpoint:QStashEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQStashEndpoint gets an existing QStashEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQStashEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QStashEndpointState, opts ...pulumi.ResourceOption) (*QStashEndpoint, error) {
	var resource QStashEndpoint
	err := ctx.ReadResource("upstash:index/qStashEndpoint:QStashEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QStashEndpoint resources.
type qstashEndpointState struct {
	// Unique Qstash Endpoint ID
	EndpointId *string `pulumi:"endpointId"`
	// Topic Id that the endpoint is added to
	TopicId *string `pulumi:"topicId"`
	// Unique Qstash Topic Name for Endpoint
	TopicName *string `pulumi:"topicName"`
	// URL of the endpoint
	Url *string `pulumi:"url"`
}

type QStashEndpointState struct {
	// Unique Qstash Endpoint ID
	EndpointId pulumi.StringPtrInput
	// Topic Id that the endpoint is added to
	TopicId pulumi.StringPtrInput
	// Unique Qstash Topic Name for Endpoint
	TopicName pulumi.StringPtrInput
	// URL of the endpoint
	Url pulumi.StringPtrInput
}

func (QStashEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*qstashEndpointState)(nil)).Elem()
}

type qstashEndpointArgs struct {
	// Topic Id that the endpoint is added to
	TopicId string `pulumi:"topicId"`
	// URL of the endpoint
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a QStashEndpoint resource.
type QStashEndpointArgs struct {
	// Topic Id that the endpoint is added to
	TopicId pulumi.StringInput
	// URL of the endpoint
	Url pulumi.StringInput
}

func (QStashEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*qstashEndpointArgs)(nil)).Elem()
}

type QStashEndpointInput interface {
	pulumi.Input

	ToQStashEndpointOutput() QStashEndpointOutput
	ToQStashEndpointOutputWithContext(ctx context.Context) QStashEndpointOutput
}

func (*QStashEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**QStashEndpoint)(nil)).Elem()
}

func (i *QStashEndpoint) ToQStashEndpointOutput() QStashEndpointOutput {
	return i.ToQStashEndpointOutputWithContext(context.Background())
}

func (i *QStashEndpoint) ToQStashEndpointOutputWithContext(ctx context.Context) QStashEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QStashEndpointOutput)
}

// QStashEndpointArrayInput is an input type that accepts QStashEndpointArray and QStashEndpointArrayOutput values.
// You can construct a concrete instance of `QStashEndpointArrayInput` via:
//
//	QStashEndpointArray{ QStashEndpointArgs{...} }
type QStashEndpointArrayInput interface {
	pulumi.Input

	ToQStashEndpointArrayOutput() QStashEndpointArrayOutput
	ToQStashEndpointArrayOutputWithContext(context.Context) QStashEndpointArrayOutput
}

type QStashEndpointArray []QStashEndpointInput

func (QStashEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QStashEndpoint)(nil)).Elem()
}

func (i QStashEndpointArray) ToQStashEndpointArrayOutput() QStashEndpointArrayOutput {
	return i.ToQStashEndpointArrayOutputWithContext(context.Background())
}

func (i QStashEndpointArray) ToQStashEndpointArrayOutputWithContext(ctx context.Context) QStashEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QStashEndpointArrayOutput)
}

// QStashEndpointMapInput is an input type that accepts QStashEndpointMap and QStashEndpointMapOutput values.
// You can construct a concrete instance of `QStashEndpointMapInput` via:
//
//	QStashEndpointMap{ "key": QStashEndpointArgs{...} }
type QStashEndpointMapInput interface {
	pulumi.Input

	ToQStashEndpointMapOutput() QStashEndpointMapOutput
	ToQStashEndpointMapOutputWithContext(context.Context) QStashEndpointMapOutput
}

type QStashEndpointMap map[string]QStashEndpointInput

func (QStashEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QStashEndpoint)(nil)).Elem()
}

func (i QStashEndpointMap) ToQStashEndpointMapOutput() QStashEndpointMapOutput {
	return i.ToQStashEndpointMapOutputWithContext(context.Background())
}

func (i QStashEndpointMap) ToQStashEndpointMapOutputWithContext(ctx context.Context) QStashEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QStashEndpointMapOutput)
}

type QStashEndpointOutput struct{ *pulumi.OutputState }

func (QStashEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QStashEndpoint)(nil)).Elem()
}

func (o QStashEndpointOutput) ToQStashEndpointOutput() QStashEndpointOutput {
	return o
}

func (o QStashEndpointOutput) ToQStashEndpointOutputWithContext(ctx context.Context) QStashEndpointOutput {
	return o
}

// Unique Qstash Endpoint ID
func (o QStashEndpointOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *QStashEndpoint) pulumi.StringOutput { return v.EndpointId }).(pulumi.StringOutput)
}

// Topic Id that the endpoint is added to
func (o QStashEndpointOutput) TopicId() pulumi.StringOutput {
	return o.ApplyT(func(v *QStashEndpoint) pulumi.StringOutput { return v.TopicId }).(pulumi.StringOutput)
}

// Unique Qstash Topic Name for Endpoint
func (o QStashEndpointOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *QStashEndpoint) pulumi.StringOutput { return v.TopicName }).(pulumi.StringOutput)
}

// URL of the endpoint
func (o QStashEndpointOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *QStashEndpoint) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type QStashEndpointArrayOutput struct{ *pulumi.OutputState }

func (QStashEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QStashEndpoint)(nil)).Elem()
}

func (o QStashEndpointArrayOutput) ToQStashEndpointArrayOutput() QStashEndpointArrayOutput {
	return o
}

func (o QStashEndpointArrayOutput) ToQStashEndpointArrayOutputWithContext(ctx context.Context) QStashEndpointArrayOutput {
	return o
}

func (o QStashEndpointArrayOutput) Index(i pulumi.IntInput) QStashEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QStashEndpoint {
		return vs[0].([]*QStashEndpoint)[vs[1].(int)]
	}).(QStashEndpointOutput)
}

type QStashEndpointMapOutput struct{ *pulumi.OutputState }

func (QStashEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QStashEndpoint)(nil)).Elem()
}

func (o QStashEndpointMapOutput) ToQStashEndpointMapOutput() QStashEndpointMapOutput {
	return o
}

func (o QStashEndpointMapOutput) ToQStashEndpointMapOutputWithContext(ctx context.Context) QStashEndpointMapOutput {
	return o
}

func (o QStashEndpointMapOutput) MapIndex(k pulumi.StringInput) QStashEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QStashEndpoint {
		return vs[0].(map[string]*QStashEndpoint)[vs[1].(string)]
	}).(QStashEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QStashEndpointInput)(nil)).Elem(), &QStashEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*QStashEndpointArrayInput)(nil)).Elem(), QStashEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QStashEndpointMapInput)(nil)).Elem(), QStashEndpointMap{})
	pulumi.RegisterOutputType(QStashEndpointOutput{})
	pulumi.RegisterOutputType(QStashEndpointArrayOutput{})
	pulumi.RegisterOutputType(QStashEndpointMapOutput{})
}

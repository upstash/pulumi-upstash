// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package upstash

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type QStashTopic struct {
	pulumi.CustomResourceState

	// Endpoints for the Qstash Topic
	Endpoints pulumi.StringMapArrayOutput `pulumi:"endpoints"`
	// Name of the Qstash Topic
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique Qstash Topic ID for requested topic
	TopicId pulumi.StringOutput `pulumi:"topicId"`
}

// NewQStashTopic registers a new resource with the given unique name, arguments, and options.
func NewQStashTopic(ctx *pulumi.Context,
	name string, args *QStashTopicArgs, opts ...pulumi.ResourceOption) (*QStashTopic, error) {
	if args == nil {
		args = &QStashTopicArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource QStashTopic
	err := ctx.RegisterResource("upstash:index/qStashTopic:QStashTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQStashTopic gets an existing QStashTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQStashTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QStashTopicState, opts ...pulumi.ResourceOption) (*QStashTopic, error) {
	var resource QStashTopic
	err := ctx.ReadResource("upstash:index/qStashTopic:QStashTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering QStashTopic resources.
type qstashTopicState struct {
	// Endpoints for the Qstash Topic
	Endpoints []map[string]string `pulumi:"endpoints"`
	// Name of the Qstash Topic
	Name *string `pulumi:"name"`
	// Unique Qstash Topic ID for requested topic
	TopicId *string `pulumi:"topicId"`
}

type QStashTopicState struct {
	// Endpoints for the Qstash Topic
	Endpoints pulumi.StringMapArrayInput
	// Name of the Qstash Topic
	Name pulumi.StringPtrInput
	// Unique Qstash Topic ID for requested topic
	TopicId pulumi.StringPtrInput
}

func (QStashTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*qstashTopicState)(nil)).Elem()
}

type qstashTopicArgs struct {
	// Name of the Qstash Topic
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a QStashTopic resource.
type QStashTopicArgs struct {
	// Name of the Qstash Topic
	Name pulumi.StringPtrInput
}

func (QStashTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*qstashTopicArgs)(nil)).Elem()
}

type QStashTopicInput interface {
	pulumi.Input

	ToQStashTopicOutput() QStashTopicOutput
	ToQStashTopicOutputWithContext(ctx context.Context) QStashTopicOutput
}

func (*QStashTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**QStashTopic)(nil)).Elem()
}

func (i *QStashTopic) ToQStashTopicOutput() QStashTopicOutput {
	return i.ToQStashTopicOutputWithContext(context.Background())
}

func (i *QStashTopic) ToQStashTopicOutputWithContext(ctx context.Context) QStashTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QStashTopicOutput)
}

// QStashTopicArrayInput is an input type that accepts QStashTopicArray and QStashTopicArrayOutput values.
// You can construct a concrete instance of `QStashTopicArrayInput` via:
//
//	QStashTopicArray{ QStashTopicArgs{...} }
type QStashTopicArrayInput interface {
	pulumi.Input

	ToQStashTopicArrayOutput() QStashTopicArrayOutput
	ToQStashTopicArrayOutputWithContext(context.Context) QStashTopicArrayOutput
}

type QStashTopicArray []QStashTopicInput

func (QStashTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QStashTopic)(nil)).Elem()
}

func (i QStashTopicArray) ToQStashTopicArrayOutput() QStashTopicArrayOutput {
	return i.ToQStashTopicArrayOutputWithContext(context.Background())
}

func (i QStashTopicArray) ToQStashTopicArrayOutputWithContext(ctx context.Context) QStashTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QStashTopicArrayOutput)
}

// QStashTopicMapInput is an input type that accepts QStashTopicMap and QStashTopicMapOutput values.
// You can construct a concrete instance of `QStashTopicMapInput` via:
//
//	QStashTopicMap{ "key": QStashTopicArgs{...} }
type QStashTopicMapInput interface {
	pulumi.Input

	ToQStashTopicMapOutput() QStashTopicMapOutput
	ToQStashTopicMapOutputWithContext(context.Context) QStashTopicMapOutput
}

type QStashTopicMap map[string]QStashTopicInput

func (QStashTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QStashTopic)(nil)).Elem()
}

func (i QStashTopicMap) ToQStashTopicMapOutput() QStashTopicMapOutput {
	return i.ToQStashTopicMapOutputWithContext(context.Background())
}

func (i QStashTopicMap) ToQStashTopicMapOutputWithContext(ctx context.Context) QStashTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QStashTopicMapOutput)
}

type QStashTopicOutput struct{ *pulumi.OutputState }

func (QStashTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QStashTopic)(nil)).Elem()
}

func (o QStashTopicOutput) ToQStashTopicOutput() QStashTopicOutput {
	return o
}

func (o QStashTopicOutput) ToQStashTopicOutputWithContext(ctx context.Context) QStashTopicOutput {
	return o
}

// Endpoints for the Qstash Topic
func (o QStashTopicOutput) Endpoints() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *QStashTopic) pulumi.StringMapArrayOutput { return v.Endpoints }).(pulumi.StringMapArrayOutput)
}

// Name of the Qstash Topic
func (o QStashTopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *QStashTopic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique Qstash Topic ID for requested topic
func (o QStashTopicOutput) TopicId() pulumi.StringOutput {
	return o.ApplyT(func(v *QStashTopic) pulumi.StringOutput { return v.TopicId }).(pulumi.StringOutput)
}

type QStashTopicArrayOutput struct{ *pulumi.OutputState }

func (QStashTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*QStashTopic)(nil)).Elem()
}

func (o QStashTopicArrayOutput) ToQStashTopicArrayOutput() QStashTopicArrayOutput {
	return o
}

func (o QStashTopicArrayOutput) ToQStashTopicArrayOutputWithContext(ctx context.Context) QStashTopicArrayOutput {
	return o
}

func (o QStashTopicArrayOutput) Index(i pulumi.IntInput) QStashTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *QStashTopic {
		return vs[0].([]*QStashTopic)[vs[1].(int)]
	}).(QStashTopicOutput)
}

type QStashTopicMapOutput struct{ *pulumi.OutputState }

func (QStashTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*QStashTopic)(nil)).Elem()
}

func (o QStashTopicMapOutput) ToQStashTopicMapOutput() QStashTopicMapOutput {
	return o
}

func (o QStashTopicMapOutput) ToQStashTopicMapOutputWithContext(ctx context.Context) QStashTopicMapOutput {
	return o
}

func (o QStashTopicMapOutput) MapIndex(k pulumi.StringInput) QStashTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *QStashTopic {
		return vs[0].(map[string]*QStashTopic)[vs[1].(string)]
	}).(QStashTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QStashTopicInput)(nil)).Elem(), &QStashTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*QStashTopicArrayInput)(nil)).Elem(), QStashTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QStashTopicMapInput)(nil)).Elem(), QStashTopicMap{})
	pulumi.RegisterOutputType(QStashTopicOutput{})
	pulumi.RegisterOutputType(QStashTopicArrayOutput{})
	pulumi.RegisterOutputType(QStashTopicMapOutput{})
}
